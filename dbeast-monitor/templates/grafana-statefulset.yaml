apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-grafana
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-grafana
    spec:
      initContainers:
        - name: grafana-init
          image: {{ .Values.grafana.image }}
          securityContext:
            runAsUser: 0
          command:
            {{- toYaml .Values.grafana.init.command | nindent 12 }}
          volumeMounts:
          - name: grafana-storage
            mountPath: /tmp/grafana

        - name: install-dbeast-plugin
          image: curlimages/curl:7.85.0
          securityContext:
            runAsUser: 0
          command:
            - sh
            - -c
            - |
              set -e
              mkdir -p /var/lib/grafana/plugins/dbeast-dbeastmonitor-app
              if [ -z "$(ls -A /var/lib/grafana/plugins/dbeast-dbeastmonitor-app)" ]; then
                echo "Persistent volume is empty. Copying data from image..."
                curl -L -o /tmp/dbeast-dbeastmonitor-plugin.zip {{ tpl .Values.grafana.pluginUrl $ }}
                unzip /tmp/dbeast-monitor-plugin.zip -C /var/lib/grafana/plugins
              else
                if [[ "$(cat /var/lib/grafana/plugins/dbeast-dbeastmonitor-app/plugin.json | grep version )" != *"{{ .Values.appVersion }}"* ]]; then
                  rm -rf var/lib/grafana/plugins/dbeast-dbeastmonitor-app/*
                  curl -L -o /tmp/dbeast-dbeastmonitor-plugin.zip {{ tpl .Values.grafana.pluginUrl $ }}
                  unzip -xvzf /tmp/dbeast-dbeastmonitor-plugin.zip -C /var/lib/grafana/plugins
                  echo "Installed the new plugin version: {{ .Values.appVersion }}"
                else
                  echo "Persistent volume is not empty. Skipping data copy."
                fi
              fi
          volumeMounts:
          - name: grafana-plugins
            mountPath: /var/lib/grafana/plugins

        - name: logstash-init
          image: {{ .Values.logstash.image }}
          securityContext:
            runAsUser: 0
          command:
            {{- toYaml .Values.logstash.init.command | nindent 12 }}
          volumeMounts:
            - name: logstash-config
              mountPath: /tmp/logstash

      containers:
      - name: grafana
        resources:
          {{- toYaml .Values.grafana.resources | nindent 10 }}
        securityContext:
          runAsUser: 0
        image: {{ .Values.grafana.image }}
        ports:
        - containerPort: 3000
        env:
        {{- range .Values.grafana.env }}
        - name: {{ .name }}
          value: {{ .value }}
        {{- end }}
        volumeMounts:
          - name: grafana-config
            mountPath: /etc/grafana
          - name: grafana-logs
            mountPath: /var/log/grafana
          - name: grafana-storage
            mountPath: /var/lib/grafana
          - name: grafana-plugins
            mountPath: /var/lib/grafana/plugins
          - name: logstash-config
            mountPath: /opt/dbeast/logstash/config
        {{- range .Values.grafana.volumes }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
            {{- if .subPath }}
            subPath: {{ .subPath }}
            {{- end }}
        {{- end }}
        #Run lifecycle if this is new installation
        lifecycle:
        {{- if .Release.IsInstall }}
          postStart:
            exec:
              command: [ "/bin/sh", "-c", "sleep 30; curl -X POST -H 'Content-Type: application/json' -d '{\"enabled\": true}' -H 'Authorization: Basic YWRtaW46YWRtaW4=' http://localhost:3000/api/plugins/dbeast-dbeastmonitor-app/settings" ]
        {{- else if .Release.IsUpgrade }}
          postStart:
            exec:
              command: [ "/bin/sh", "-c", "sleep 30; curl -X POST -H 'Content-Type: application/json' -H 'Authorization: Basic YWRtaW46YWRtaW4=' http://localhost:3000/api/plugins/dbeast-dbeastmonitor-app/settings/reload" ]
        {{- end }}
      - name: logstash
        resources:
          {{- toYaml .Values.logstash.resources | nindent 10 }}
        securityContext:
          runAsUser: 0
        image: {{ .Values.logstash.image }}
        ports:
        - containerPort: {{ .Values.logstash.service.port }}
        env:
        {{- range .Values.logstash.env }}
        - name: {{ .name }}
          value: {{ .value }}
        {{- end }}
        volumeMounts:
          - name: logstash-config
            mountPath: /usr/share/logstash/config
          - name: logstash-yml
            mountPath: /usr/share/logstash/config/logstash.yml
            subPath: logstash.yml
          - name: logstash-lib
            mountPath: /var/lib/logstash
          - name: logstash-logs
            mountPath: /var/log/logstash
        {{- range .Values.logstash.volumes }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
            {{- if .subPath }}
            subPath: {{ .subPath }}
            {{- end }}
        {{- end }}
      volumes:
        - name: grafana-config
          configMap:
            name: {{ .Release.Name }}-grafana-config
        - name: grafana-logs
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-grafana-logs-pvc
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-grafana-pvc
        - name: grafana-plugins
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-grafana-plugins-pvc
      {{- range .Values.grafana.volumes }}
        - name: {{ .name }}
          {{- if .source.configMap }}
          configMap:
            name: {{ .source.configMap.name }}
          {{- else if .source.persistentVolumeClaim }}
          persistentVolumeClaim:
            claimName: {{ .source.persistentVolumeClaim.claimName }}
          {{- end }}
      {{- end }}
        - name: logstash-config
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-logstash-config-pvc
        - name: logstash-lib
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-logstash-lib-pvc
        - name: logstash-logs
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-logstash-logs-pvc
        - name: logstash-yml
          configMap:
            name: {{ .Release.Name }}-logstash-config
            items:
              - key: logstash.yml
                path: logstash.yml
      {{- range .Values.logstash.volumes }}
        - name: {{ .name }}
          {{- if .source.configMap }}
          configMap:
            name: {{ .source.configMap.name }}
            {{- if .source.configMap.key }}
            items:
              - key: {{ .source.configMap.key }}
                path: {{ .source.configMap.path | default .source.configMap.key }}
            {{- end }}
          {{- else if .source.persistentVolumeClaim }}
          persistentVolumeClaim:
            claimName: {{ .source.persistentVolumeClaim.claimName }}
          {{- end }}
      {{- end }}
